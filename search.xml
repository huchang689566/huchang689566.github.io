<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程中wait 和sleep的区别</title>
      <link href="2020/09/13/sleep/"/>
      <url>2020/09/13/sleep/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程中wait-和sleep的区别"><a href="#多线程中wait-和sleep的区别" class="headerlink" title="多线程中wait 和sleep的区别"></a>多线程中wait 和sleep的区别</h1><h2 id="wait-和sleep的基本使用："><a href="#wait-和sleep的基本使用：" class="headerlink" title="wait 和sleep的基本使用："></a>wait 和sleep的基本使用：</h2><p>​        wait：objects，锁对象调用，锁对象可以是任意对象，也可以单独创建一个锁对象。</p><p>​         sleep：Thead类的静态方法。</p><h3 id="使用条件："><a href="#使用条件：" class="headerlink" title="使用条件："></a>使用条件：</h3><p>​        wait ：使用依赖于锁对象，锁对象又是出现在同步方法/代码块中，所以wait方法也必须是在同步中出现。</p><p>​        sleep：可以出现在任意位置。</p><img src="/2020/09/13/sleep/1.png" class="" title="This is an test image"><p>sleep：会释放cpu资源，但是不会释放锁，当休眠时间结束之后，被休眠线程进入就绪状态和其他线程竞争CPU执行权。</p><p>当sleep出现在同步代码块中，虽然当前线程让出了cpu的执行权，但是由于没有释放锁资源，其他线程即使获得CPU的执行权但是没办法获得锁资源，所以没办法进入同步块中 ，线程得不到被锁住的资源会放弃cpu使用权，进入线程阻塞，等待锁资源被释放。如果获得锁资源之后线程会进入就绪状态。</p><img src="/2020/09/13/sleep/2.png" class="" title="This is an test image"><p>wait：会释放cpu资源和锁资源，进入等待池中，其他线程获得cpu执行权和锁资源，能进入到同步块中执行。需要在另一个线程中手动唤醒，唤醒后由等待池进入锁池。</p><p>不带参：立马让出资源。</p><p>带参：再执行当前设置时间后，让出资源。</p><h3 id="wait线程唤醒："><a href="#wait线程唤醒：" class="headerlink" title="wait线程唤醒："></a>wait线程唤醒：</h3><p>唤醒等待线程，并不是立刻去执行被唤醒的线程，被唤醒的线程只是就绪状态，需要当前线程执行完释放CPU资源之后之后，就绪状态线程再去竞争获得CPU执行权。</p><img src="/2020/09/13/sleep/3.png" class="" title="This is an test image"><img src="/2020/09/13/sleep/4.png" class="" title="This is an test image"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/11/hellonullworld/"/>
      <url>2020/09/11/hellonullworld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
